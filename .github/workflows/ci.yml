name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CONAN_CMAKE_GENERATOR: Ninja
  CMAKE_GENERATOR: Ninja
  CMAKE_BUILD_TYPE: Release
  source-dir: ${{ github.workspace }}
  build-dir: ${{ github.workspace }}/build

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - {
              name: 'Build: Windows MSVC',
              os: windows-2022,
              cc: cl,
              cxx: cl,
              profile: conan/vs-17-md
            }
          - {
              name: 'Build: Windows Clang',
              os: windows-2022,
              cc: clang,
              cxx: clang++,
              profile: conan/clang-13
            }
          - {
              name: 'Build: Macos Clang 13',
              os: macos-latest,
              cc: clang,
              cxx: clang++,
              profile: conan/clang-13
            }
          - {
              name: 'Build: Linux GCC 11',
              os: ubuntu-latest,
              cc: gcc-11,
              cxx: g++-11,
              profile: conan/gcc-11
            }
          - {
              name: 'Build: Linux Clang 12',
              os: ubuntu-latest,
              cc: clang-12,
              cxx: clang++-12,
              profile: conan/clang-12
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set environment variables
        run: echo CONAN_USER_HOME=${{ runner.temp }} >> ${{ github.env }}

      - name: Select LLVM Clang on Macos
        if: matrix.config.os == 'macos-latest' && matrix.config.profile == 'conan/clang-13'
        run: |
          echo CC=$(brew --prefix llvm)/bin/clang >> ${{ github.env }}
          echo CXX=$(brew --prefix llvm)/bin/clang++ >> ${{ github.env }}

      - name: Set up Visual Studio shell
        if: matrix.config.os == 'windows-2022'
        uses: egor-tensin/vs-shell@v2

      - name: Install dependencies on Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install gcc-11 g++-11 cppcheck iwyu -y # TODO: clang-tidy

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          cache: pipenv

      - name: Install Python dependencies
        run: |
          pipx install pipenv
          pipenv install --dev
          pipenv run conan profile new default --detect

      - name: Update the default Conan profile on Windows
        if: matrix.config.os == 'windows-2022' && matrix.config.profile == 'conan/clang-13'
        run: pipenv run conan profile update settings.compiler.libcxx=None default

      - name: Update the default Conan profile on Macos
        if: matrix.config.os == 'macos-latest'
        run: pipenv run conan profile update settings.compiler.libcxx=libc++ default

      - name: Update the default Conan profile on Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: pipenv run conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: conandata-${{ runner.os }}-${{ matrix.config.profile }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ matrix.config.profile }}-
            conandata-${{ runner.os }}-

      - name: Install Conan packages
        run: pipenv run conan install ${{ env.source-dir }} -b missing -if ${{ env.build-dir }} -pr:b default -pr:h default -pr:h ${{ matrix.config.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: pipenv run cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.build-dir }}/conan_toolchain.cmake -D ENABLE_CPPCHECK:BOOL=${{ matrix.config.os == 'ubuntu-latest' }} -D ENABLE_CLANG_TIDY:BOOL=FALSE -D ENABLE_INCLUDE_WHAT_YOU_USE:BOOL=${{ matrix.config.os == 'ubuntu-latest' }}

      - name: Build
        run: cmake --build ${{ env.build-dir }} --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Run tests
        if: matrix.config.os != 'windows-2022' || matrix.build-type != 'Debug'
        run: ctest -C ${{ matrix.build-type }} --test-dir ${{ env.build-dir }} --output-on-failure

      - name: Collect test coverage
        if: matrix.config.os != 'windows-2022' && matrix.build-type == 'Debug'
        run: pipenv run gcovr

      - name: Test and collect test coverage (windows)
        if: matrix.config.os == 'windows-2022' && matrix.build-type == 'Debug'
        run: |
          & "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{ matrix.build-type }} --test-dir ${{ env.build-dir }} --output-on-failure

  release:
    name: Semantic release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm

      - name: Install semantic-release
        run: npm ci

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: npx semantic-release

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    env:
      profile: conan/gcc-11
      CC: gcc-11
      CXX: g++-11

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: cpp

      - name: Set environment variables
        run: echo CONAN_USER_HOME=${{ runner.temp }} >> ${{ github.env }}

      - name: Install GCC 11
        run: sudo apt install gcc-11 g++-11 -y

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          cache: pipenv

      - name: Install Python dependencies
        run: |
          pipx install pipenv
          pipenv install --dev
          pipenv run conan profile new default --detect
          pipenv run conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: conandata-${{ runner.os }}-${{ env.profile }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ env.profile }}-
            conandata-${{ runner.os }}-

      - name: Install Conan packages
        run: pipenv run conan install ${{ env.source-dir }} -b missing -if ${{ env.build-dir }} -pr:b default -pr:h default -pr:h ${{ env.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: pipenv run cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.build-dir }}/conan_toolchain.cmake

      - name: Build
        run: cmake --build ${{ env.build-dir }} --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  analyze:
    name: Analyze
    runs-on: windows-2022
    env:
      profile: conan/vs-17-md

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set environment variables
        run: echo CONAN_USER_HOME=${{ runner.temp }} >> ${{ github.env }}

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          cache: pipenv

      - name: Install Python dependencies
        run: |
          pipx install pipenv
          pipenv install --dev
          pipenv run conan profile new default --detect

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: conandata-${{ runner.os }}-${{ env.profile }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ env.profile }}-
            conandata-${{ runner.os }}-

      - name: Install Conan packages
        run: pipenv run conan install ${{ env.source-dir }} -b missing -if ${{ env.build-dir }} -pr:b default -pr:h default -pr:h ${{ env.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: pipenv run cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.build-dir }}/conan_toolchain.cmake

      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@main
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build-dir }}
          buildConfiguration: ${{ env.CMAKE_BUILD_TYPE }}
          ruleset: NativeRecommendedRules.ruleset

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}
