name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  CMAKE_GENERATOR: Ninja
  CMAKE_BUILD_TYPE: Release
  CMAKE_BUILD_PRESET: conan-release
  source-dir: ${{ github.workspace }}
  build-dir: ${{ github.workspace }}/build

jobs:
  build:
    name: ${{ matrix.config.name }} ${{ matrix.build.type }}
    runs-on: ${{ matrix.config.os }}
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      GCOV: ${{ matrix.config.gcov }}
    strategy:
      matrix:
        build:
          - {
              type: Debug,
              preset: conan-debug
            }
          - {
              type: RelWithDebInfo,
              preset: conan-relwithdebinfo
            }
        config:
          - {
              name: 'Windows MSVC',
              os: windows-2022,
              cc: cl,
              cxx: cl,
              gcov: opencppcoverage,
              profile: conan/msvc193-md
            }
          - {
              name: 'Windows Clang 15',
              os: windows-2022,
              cc: clang,
              cxx: clang++,
              gcov: opencppcoverage,
              profile: conan/clang15
            }
          - {
              name: 'Macos Clang 15',
              os: macos-12,
              cc: clang,
              cxx: clang++,
              gcov: llvm-cov gcov,
              profile: conan/clang15
            }
          - {
              name: 'Linux GCC 12',
              os: ubuntu-22.04,
              cc: gcc-12,
              cxx: g++-12,
              gcov: gcov-12,
              profile: conan/gcc12
            }
          - {
              name: 'Linux Clang 14',
              os: ubuntu-22.04,
              cc: clang-14,
              cxx: clang++-14,
              gcov: llvm-cov-14 gcov,
              profile: conan/clang14
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Visual Studio shell
        if: matrix.config.os == 'windows-2022'
        uses: egor-tensin/vs-shell@v2

      - name: Install dependencies on Windows
        if: matrix.config.os == 'windows-2022'
        run: choco install opencppcoverage

      - name: Install dependencies on Linux
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install cppcheck
          echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-14 100
          sudo update-alternatives --set clang-tidy /usr/bin/clang-tidy-14

      - name: Select LLVM on Macos
        if: matrix.config.os == 'macos-12'
        run: |
          echo CC=$(brew --prefix llvm@15)/bin/clang >> ${{ github.env }}
          echo CXX=$(brew --prefix llvm@15)/bin/clang++ >> ${{ github.env }}
          echo GCOV=$(brew --prefix llvm@15)/bin/llvm-cov gcov >> ${{ github.env }}

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: poetry

      - name: Install Python dependencies
        run: |
          poetry install
          poetry run conan profile detect

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ${{ env.source-dir }}/.conan2/p
          key: conandata-${{ runner.os }}-${{ matrix.config.profile }}-${{ matrix.build.type }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ matrix.config.profile }}-${{ matrix.build.type }}-
            conandata-${{ runner.os }}-${{ matrix.config.profile }}-

      - name: Install Conan packages
        run: poetry run conan install ${{ env.source-dir }} -b missing -pr:b default -pr:h default -c:h tools.cmake.cmaketoolchain:generator=Ninja -pr:h ${{ matrix.config.profile }} -s:h build_type=${{ matrix.build.type }}

      - name: Configure
        run: poetry run cmake --preset ${{ matrix.build.preset }} -D ENABLE_COVERAGE:BOOL=${{ matrix.build.type == 'Debug' }} -D ENABLE_CPPCHECK:BOOL=${{ matrix.config.os == 'ubuntu-22.04' }} -D ENABLE_CLANG_TIDY:BOOL=${{ matrix.config.os != 'macos-12' && startsWith(matrix.config.profile, 'conan/clang') }}

      - name: Build
        run: cmake --build --preset ${{ matrix.build.preset }}

      - name: Run tests
        if: matrix.config.os != 'windows-2022' || matrix.build.type != 'Debug'
        run: ctest --preset ${{ matrix.build.preset }}

      - name: Collect test coverage
        if: matrix.config.os != 'windows-2022' && matrix.build.type == 'Debug'
        run: poetry run gcovr --txt

      - name: Test and collect test coverage (windows)
        if: matrix.config.os == 'windows-2022' && matrix.build.type == 'Debug'
        run: |
          & "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --export_type cobertura:coverage.xml --cover_children -- ctest --preset ${{ matrix.build.preset }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: ${{ !cancelled() }}
        with:
          report_paths: '**/junit-reports/*.xml'
          annotate_only: true
          fail_on_failure: true

      - name: Publish test coverage to codecov
        if: matrix.build.type == 'Debug'
        uses: codecov/codecov-action@v3
        with:
          token: e12a1d0a-85fa-4971-8897-2a6daf8f9674
          flags: ${{ matrix.config.os }}-${{ matrix.config.cc }}
          name: ${{ matrix.config.name }}
          files: coverage.xml
          fail_ci_if_error: true

  release:
    name: Semantic release
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: npm

      - name: Install semantic-release
        run: npm ci

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: npx semantic-release

  codeql:
    name: CodeQL
    runs-on: ubuntu-22.04
    env:
      profile: conan/gcc12
      CC: gcc-12
      CXX: g++-12

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: cpp

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: poetry

      - name: Install Python dependencies
        run: |
          poetry install
          poetry run conan profile detect

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ${{ env.source-dir }}/.conan2/p
          key: conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-
            conandata-${{ runner.os }}-${{ env.profile }}-

      - name: Install Conan packages
        run: poetry run conan install ${{ env.source-dir }} -b missing -pr:b default -pr:h default -c:h tools.cmake.cmaketoolchain:generator=Ninja -pr:h ${{ env.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: poetry run cmake --preset ${{ env.CMAKE_BUILD_PRESET }}

      - name: Build
        run: cmake --build --preset ${{ env.CMAKE_BUILD_PRESET }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  analyze:
    name: Analyze
    runs-on: windows-2022
    env:
      profile: conan/msvc193-md

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: poetry

      - name: Install Python dependencies
        run: |
          poetry install
          poetry run conan profile detect

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ${{ env.source-dir }}/.conan2/p
          key: conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-
            conandata-${{ runner.os }}-${{ env.profile }}-

      - name: Install Conan packages
        run: poetry run conan install ${{ env.source-dir }} -b missing -pr:b default -pr:h default -c:h tools.cmake.cmaketoolchain:generator=Ninja -pr:h ${{ env.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: poetry run cmake --preset ${{ env.CMAKE_BUILD_PRESET }}

      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@main
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build-dir }}/${{ env.CMAKE_BUILD_TYPE }}
          buildConfiguration: ${{ env.CMAKE_BUILD_TYPE }}
          ruleset: NativeRecommendedRules.ruleset

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}
