name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      build-dir: ${{ github.workspace }}/build
      source-dir: ${{ github.workspace }}
      build-type: Release
    strategy:
      matrix:
        config:
          - {
              name: 'Build: Windows MSVC',
              os: windows-latest,
              toolchain: cmake/msvc.cmake
            }
          - {
              name: 'Build: Linux GCC 11',
              os: ubuntu-latest,
              toolchain: cmake/gcc-11.cmake
            }
          - {
              name: 'Build: Linux Clang 12',
              os: ubuntu-latest,
              toolchain: cmake/clang-12.cmake
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # TODO: use cache for Conan packages

      - name: Install dependencies on Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install gcc-11 g++-11 cppcheck iwyu -y # TODO: clang-tidy
          sudo pip3 install conan
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Install dependencies on Windows
        if: matrix.config.os == 'windows-latest'
        run: |
          pip install conan
          conan profile new default --detect

      - name: Configure
        run: cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ matrix.config.toolchain }} -D CMAKE_BUILD_TYPE:STRING=${{ env.build-type }} -D ENABLE_CPPCHECK:BOOL=${{ matrix.config.os == 'ubuntu-latest' }} -D ENABLE_CLANG_TIDY:BOOL=FALSE -D ENABLE_INCLUDE_WHAT_YOU_USE:BOOL=${{ matrix.config.os == 'ubuntu-latest' }}

      - name: Build
        run: cmake --build ${{ env.build-dir }} --config ${{ env.build-type }}

  release:
    name: Semantic release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: package.json

      - name: Install semantic-release
        run: npm i

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: npx semantic-release

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    env:
      build-dir: ${{ github.workspace }}/build
      source-dir: ${{ github.workspace }}
      toolchain: cmake/gcc-11.cmake
      build-type: Release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: cpp

      - name: Install dependencies
        run: |
          sudo apt install gcc-11 g++-11 -y
          sudo pip3 install conan # TODO: use cache
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Configure
        run: cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.toolchain }} -D CMAKE_BUILD_TYPE:STRING=${{ env.build-type }}

      - name: Build
        run: cmake --build ${{ env.build-dir }} --config ${{ env.build-type }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  analyze:
    name: Analyze
    runs-on: windows-latest
    env:
      build-dir: ${{ github.workspace }}/build
      source-dir: ${{ github.workspace }}
      build-type: Release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # TODO: use cache
      - name: Install dependencies
        run: |
          pip install conan
          conan profile new default --detect

      - name: Configure
        run: cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain cmake/msvc.cmake -D CMAKE_BUILD_TYPE:STRING=${{ env.build-type }}

      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@main
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build-dir }}
          buildConfiguration: ${{ env.build-type }}
          ruleset: NativeRecommendedRules.ruleset

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}
