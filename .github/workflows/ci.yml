name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  CONAN_CMAKE_GENERATOR: Ninja
  CMAKE_GENERATOR: Ninja
  CMAKE_BUILD_TYPE: Release
  source-dir: ${{ github.workspace }}
  build-dir: ${{ github.workspace }}/build

jobs:
  build:
    name: ${{ matrix.config.name }} ${{ matrix.build-type }}
    runs-on: ${{ matrix.config.os }}
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      GCOV: ${{ matrix.config.gcov }}
    strategy:
      matrix:
        build-type:
          - Debug
          - RelWithDebInfo
        config:
          - {
              name: 'Windows MSVC',
              os: windows-2022,
              cc: cl,
              cxx: cl,
              gcov: opencppcoverage,
              profile: conan/vs-17-md
            }
          - {
              name: 'Windows Clang 14',
              os: windows-2022,
              cc: clang,
              cxx: clang++,
              gcov: opencppcoverage,
              profile: conan/clang-14
            }
          - {
              name: 'Macos Clang 14',
              os: macos-12,
              cc: clang,
              cxx: clang++,
              gcov: llvm-cov gcov,
              profile: conan/clang-14
            }
          - {
              name: 'Linux GCC 11',
              os: ubuntu-latest,
              cc: gcc,
              cxx: g++,
              gcov: gcov,
              profile: conan/gcc-11
            }
          - {
              name: 'Linux Clang 14',
              os: ubuntu-latest,
              cc: clang,
              cxx: clang++,
              gcov: llvm-cov gcov,
              profile: conan/clang-14
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment variables
        run: echo CONAN_USER_HOME=${{ runner.temp }} >> ${{ github.env }}

      - name: Set up Visual Studio shell
        if: matrix.config.os == 'windows-2022'
        uses: egor-tensin/vs-shell@v2

      - name: Install dependencies on Windows
        if: matrix.config.os == 'windows-2022'
        run: choco install opencppcoverage

      - name: Install dependencies on Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: brew install gcc llvm cppcheck include-what-you-use

      - name: Select GCC on Linux
        if: matrix.config.os == 'ubuntu-latest' && matrix.config.profile == 'conan/gcc-11'
        run: |
          echo CC=$(brew --prefix gcc)/bin/gcc-11 >> ${{ github.env }}
          echo CXX=$(brew --prefix gcc)/bin/g++-11 >> ${{ github.env }}
          echo GCOV=$(brew --prefix gcc)/bin/gcov-11 >> ${{ github.env }}

      - name: Select LLVM on Linux
        if: matrix.config.os == 'ubuntu-latest' && matrix.config.profile == 'conan/clang-14'
        run: |
          echo CC=$(brew --prefix llvm)/bin/clang >> ${{ github.env }}
          echo CXX=$(brew --prefix llvm)/bin/clang++ >> ${{ github.env }}
          echo GCOV=$(brew --prefix llvm)/bin/llvm-cov gcov >> ${{ github.env }}

      - name: Select LLVM on Macos
        if: matrix.config.os == 'macos-12' && matrix.config.profile == 'conan/clang-14'
        run: |
          echo CC=$(brew --prefix llvm@14)/bin/clang >> ${{ github.env }}
          echo CXX=$(brew --prefix llvm@14)/bin/clang++ >> ${{ github.env }}
          echo GCOV=$(brew --prefix llvm@14)/bin/llvm-cov gcov >> ${{ github.env }}

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: poetry

      - name: Install Python dependencies
        run: |
          poetry install
          poetry run conan profile new default --detect

      - name: Update the default Conan profile on Windows
        if: matrix.config.os == 'windows-2022' && matrix.config.profile == 'conan/clang-14'
        run: poetry run conan profile update settings.compiler.libcxx=None default

      - name: Update the default Conan profile on Macos
        if: matrix.config.os == 'macos-12'
        run: poetry run conan profile update settings.compiler.libcxx=libc++ default

      - name: Update the default Conan profile on Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: poetry run conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: conandata-${{ runner.os }}-${{ matrix.config.profile }}-${{ matrix.build-type }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ matrix.config.profile }}-${{ matrix.build-type }}-
            conandata-${{ runner.os }}-${{ matrix.config.profile }}-
            conandata-${{ runner.os }}-

      - name: Install Conan packages
        run: poetry run conan install ${{ env.source-dir }} -b missing -if ${{ env.build-dir }} -pr:b default -pr:h default -pr:h ${{ matrix.config.profile }} -s:h build_type=${{ matrix.build-type }}

      - name: Configure
        run: poetry run cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.build-dir }}/conan_toolchain.cmake -D CMAKE_BUILD_TYPE=${{ matrix.build-type }} -D ENABLE_COVERAGE:BOOL=${{ matrix.build-type == 'Debug' }} -D ENABLE_CPPCHECK:BOOL=${{ matrix.config.os == 'ubuntu-latest' }} -D ENABLE_CLANG_TIDY:BOOL=${{ matrix.config.os != 'macos-12' && startsWith(matrix.config.profile, 'conan/clang-') }} -D ENABLE_INCLUDE_WHAT_YOU_USE:BOOL=FALSE

      - name: Build
        run: cmake --build ${{ env.build-dir }} --config ${{ matrix.build-type }}

      - name: Run tests
        if: matrix.config.os != 'windows-2022' || matrix.build-type != 'Debug'
        run: ctest -C ${{ matrix.build-type }} --test-dir ${{ env.build-dir }} --output-on-failure

      - name: Collect test coverage
        if: matrix.config.os != 'windows-2022' && matrix.build-type == 'Debug'
        run: poetry run gcovr --txt

      - name: Test and collect test coverage (windows)
        if: matrix.config.os == 'windows-2022' && matrix.build-type == 'Debug'
        run: |
          & "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{ matrix.build-type }} --test-dir ${{ env.build-dir }} --output-on-failure

      - name: Publish test coverage to codecov
        if: matrix.build-type == 'Debug'
        uses: codecov/codecov-action@v3
        with:
          token: e12a1d0a-85fa-4971-8897-2a6daf8f9674
          flags: ${{ matrix.config.os }}-${{ matrix.config.cc }}
          name: ${{ matrix.config.name }}
          files: coverage.xml
          fail_ci_if_error: true

  release:
    name: Semantic release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

      - name: Install semantic-release
        run: npm ci

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: npx semantic-release

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    env:
      profile: conan/gcc-11
      CC: gcc-11
      CXX: g++-11

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: cpp

      - name: Set environment variables
        run: echo CONAN_USER_HOME=${{ runner.temp }} >> ${{ github.env }}

      - name: Install GCC 11
        run: sudo apt install gcc-11 g++-11 -y

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: poetry

      - name: Install Python dependencies
        run: |
          poetry install
          poetry run conan profile new default --detect
          poetry run conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-
            conandata-${{ runner.os }}-${{ env.profile }}-
            conandata-${{ runner.os }}-

      - name: Install Conan packages
        run: poetry run conan install ${{ env.source-dir }} -b missing -if ${{ env.build-dir }} -pr:b default -pr:h default -pr:h ${{ env.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: poetry run cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.build-dir }}/conan_toolchain.cmake

      - name: Build
        run: cmake --build ${{ env.build-dir }} --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  analyze:
    name: Analyze
    runs-on: windows-2022
    env:
      profile: conan/vs-17-md

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment variables
        run: echo CONAN_USER_HOME=${{ runner.temp }} >> ${{ github.env }}

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: poetry

      - name: Install Python dependencies
        run: |
          poetry install
          poetry run conan profile new default --detect

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conandata-${{ runner.os }}-${{ env.profile }}-${{ env.CMAKE_BUILD_TYPE }}-
            conandata-${{ runner.os }}-${{ env.profile }}-
            conandata-${{ runner.os }}-

      - name: Install Conan packages
        run: poetry run conan install ${{ env.source-dir }} -b missing -if ${{ env.build-dir }} -pr:b default -pr:h default -pr:h ${{ env.profile }} -s:h build_type=${{ env.CMAKE_BUILD_TYPE }}

      - name: Configure
        run: poetry run cmake -B ${{ env.build-dir }} -S ${{ env.source-dir }} --toolchain ${{ env.build-dir }}/conan_toolchain.cmake

      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@main
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build-dir }}
          buildConfiguration: ${{ env.CMAKE_BUILD_TYPE }}
          ruleset: NativeRecommendedRules.ruleset

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}
